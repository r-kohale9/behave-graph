"use strict";(self.webpackChunk_behave_graph_website=self.webpackChunk_behave_graph_website||[]).push([[202],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=c(t),f=a,u=s["".concat(l,".").concat(f)]||s[f]||h[f]||o;return t?r.createElement(u,i(i({ref:n},d),{},{components:t})):r.createElement(u,i({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[s]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},i="Defining a Graph",p={unversionedId:"defining-a-graph",id:"defining-a-graph",title:"Defining a Graph",description:"A graph is a collection of nodes that define the flow of your application. The graph is defined in JSON format and can be created using the Graph Editor or by writing it manually.",source:"@site/docs/defining-a-graph.md",sourceDirName:".",slug:"/defining-a-graph",permalink:"/behave-graph/docs/defining-a-graph",draft:!1,editUrl:"https://github.com/r-kohale9/behave-graph/tree/main/website/docs/defining-a-graph.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/behave-graph/docs/getting-started"},next:{title:"Running The Engine",permalink:"/behave-graph/docs/running-the-engine"}},l={},c=[],d={toc:c},s="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-a-graph"},"Defining a Graph"),(0,a.kt)("p",null,"A graph is a collection of nodes that define the flow of your application. The graph is defined in JSON format and can be created using the ",(0,a.kt)("a",{parentName:"p",href:"./graph-editor"},"Graph Editor")," or by writing it manually."),(0,a.kt)("p",null,"Here's an example of how a Graph should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "nodes": [\n    {\n      "type": "lifecycle/onStart",\n      "id": "0",\n      "flows": {\n        "flow": {\n          "nodeId": "1",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "1",\n      "parameters": {\n        "text": {\n          "value": "Hello World!"\n        }\n      }\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"Each node has a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," and an ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is the name of the node and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," is a unique identifier for the node."),(0,a.kt)("p",null,"The nodes are connected using ",(0,a.kt)("inlineCode",{parentName:"p"},"flows"),". Each node has a ",(0,a.kt)("inlineCode",{parentName:"p"},"flows")," property that is an object with the name of the flow as the key and the value is an object with the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeId")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"socket")," of the node that the flow is connected to."),(0,a.kt)("p",null,"The nodes can also accept an arbitrary number of parameters. Each parameter can have a ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"link")," to another node's output."),(0,a.kt)("p",null,"The syntax to define a link is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"parameters": {\n  "text": {\n    "link": {\n      "nodeId": "1",\n      "socket": "result"\n    }\n  }\n}\n')))}h.isMDXComponent=!0}}]);