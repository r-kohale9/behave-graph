"use strict";(self.webpackChunk_behave_graph_website=self.webpackChunk_behave_graph_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Getting Started","href":"/behave-graph/docs/getting-started","docId":"getting-started"},{"type":"link","label":"Defining a Graph","href":"/behave-graph/docs/defining-a-graph","docId":"defining-a-graph"},{"type":"link","label":"Running The Engine","href":"/behave-graph/docs/running-the-engine","docId":"running-the-engine"},{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Registry","href":"/behave-graph/docs/core-concepts/registry","docId":"core-concepts/registry"},{"type":"link","label":"Profiles","href":"/behave-graph/docs/core-concepts/profiles","docId":"core-concepts/profiles"},{"type":"link","label":"Values","href":"/behave-graph/docs/core-concepts/values","docId":"core-concepts/values"},{"type":"link","label":"Nodes","href":"/behave-graph/docs/core-concepts/nodes","docId":"core-concepts/nodes"},{"type":"link","label":"Abstractions","href":"/behave-graph/docs/core-concepts/abstractions","docId":"core-concepts/abstractions"},{"type":"link","label":"Turing Completeness","href":"/behave-graph/docs/core-concepts/turing-completeness","docId":"core-concepts/turing-completeness"}],"href":"/behave-graph/docs/category/core-concepts"},{"type":"link","label":"Visual Editor","href":"/behave-graph/docs/graph-editor","docId":"graph-editor"}]},"docs":{"core-concepts/abstractions":{"id":"core-concepts/abstractions","title":"Abstractions","description":"Behave-graph is designed as a light weight library that can be plugged into other engines, such as Three.js or Babylon.js. In order to simplify pluggin into other engines, it defines the functionality required for interfacing with these engines as \\"abstractions\\", which can then be implemented by the engines.","sidebar":"docsSidebar"},"core-concepts/nodes":{"id":"core-concepts/nodes","title":"Nodes","description":"Nodes are the building blocks of the system. They are used to perform operations on the data in the system.","sidebar":"docsSidebar"},"core-concepts/profiles":{"id":"core-concepts/profiles","title":"Profiles","description":"A profile is a function that updates the registry with the nodes and value types that are available in the system. The profile usually also includes the Abstractions that are required for the nodes to work as parameters.","sidebar":"docsSidebar"},"core-concepts/registry":{"id":"core-concepts/registry","title":"Registry","description":"The registry is a collection of all the nodes and value types that are available in the system.","sidebar":"docsSidebar"},"core-concepts/turing-completeness":{"id":"core-concepts/turing-completeness","title":"Turing Completeness","description":"The execution model and node choices based for the Core profile mean that behave-graph is turing complete.  This means that this enging can execute any computation and it is also hard to predict if it will run forever (e.g. halt or not.)","sidebar":"docsSidebar"},"core-concepts/values":{"id":"core-concepts/values","title":"Values","description":"Behave-graph supports a pluggable value system where you can easily add new values to the system. Values are what are passed between nodes via sockets.","sidebar":"docsSidebar"},"defining-a-graph":{"id":"defining-a-graph","title":"Defining a Graph","description":"A graph is a collection of nodes that define the flow of your application. The graph is defined in JSON format and can be created using the Graph Editor or by writing it manually.","sidebar":"docsSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"About this project","sidebar":"docsSidebar"},"graph-editor":{"id":"graph-editor","title":"Visual Editor","description":"There\'s a visual editor for the graph started by @beeglebug. It\'s a WIP, but you can take a look at it here.","sidebar":"docsSidebar"},"running-the-engine":{"id":"running-the-engine","title":"Running The Engine","description":"To be able to run Behave Graph, you need to have a graph in JSON format. You can create a graph using the Graph Editor or by writing it manually.","sidebar":"docsSidebar"}}}')}}]);