"use strict";(self.webpackChunk_behave_graph_website=self.webpackChunk_behave_graph_website||[]).push([[385],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(t),m=a,f=s["".concat(l,".").concat(m)]||s[m]||g[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[s]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:3},o="Running The Engine",c={unversionedId:"running-the-engine",id:"running-the-engine",title:"Running The Engine",description:"To be able to run Behave Graph, you need to have a graph in JSON format. You can create a graph using the Graph Editor or by writing it manually.",source:"@site/docs/running-the-engine.md",sourceDirName:".",slug:"/running-the-engine",permalink:"/behave-graph/docs/running-the-engine",draft:!1,editUrl:"https://github.com/r-kohale9/behave-graph/tree/main/website/docs/running-the-engine.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Defining a Graph",permalink:"/behave-graph/docs/defining-a-graph"},next:{title:"Core Concepts",permalink:"/behave-graph/docs/category/core-concepts"}},l={},p=[],u={toc:p},s="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-the-engine"},"Running The Engine"),(0,a.kt)("p",null,"To be able to run Behave Graph, you need to have a graph in JSON format. You can create a graph using the ",(0,a.kt)("a",{parentName:"p",href:"./graph-editor"},"Graph Editor")," or by writing it manually."),(0,a.kt)("p",null,"You will also need to configure the registry with the profiles you want to use. You can read more about profiles ",(0,a.kt)("a",{parentName:"p",href:"./core-concepts/profiles"},"here"),"."),(0,a.kt)("p",null,"Here's an example code of how should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  DefaultLogger,\n  Engine,\n  readGraphFromJSON,\n  registerCoreProfile,\n  Registry,\n  ManualLifecycleEventEmitter,\n} from '@behave-graph/core';\n\nimport myGraphJson from './myGraph.json';\n\n/** Setup the Registry **/\nconst registry = new Registry();\nconst logger = new DefaultLogger();\nconst manualLifecycleEventEmitter = new ManualLifecycleEventEmitter();\n\nregisterCoreProfile(registry, logger, manualLifecycleEventEmitter);\n\n/** Prepare the Graph **/\nconst graph = readGraphFromJSON(myGraphJson, registry);\n\n/** Run the Graph **/\nconst engine = new Engine(graph);\n\n/** Trigger events **/\n\nif (manualLifecycleEventEmitter.startEvent.listenerCount > 0) {\n  manualLifecycleEventEmitter.startEvent.emit();\n  await engine.executeAllAsync(5);\n}\n\nif (manualLifecycleEventEmitter.tickEvent.listenerCount > 0) {\n  const iterations = 20;\n  const tickDuration = 0.01;\n  for (let tick = 0; tick < iterations; tick++) {\n    manualLifecycleEventEmitter.tickEvent.emit();\n    engine.executeAllSync(tickDuration);\n    await sleep(tickDuration);\n  }\n}\n\nif (manualLifecycleEventEmitter.endEvent.listenerCount > 0) {\n  manualLifecycleEventEmitter.endEvent.emit();\n  await engine.executeAllAsync(5);\n}\n\n")))}g.isMDXComponent=!0}}]);